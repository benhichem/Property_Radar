import { JWT } from "google-auth-library";
import { constants } from "./component/constants";
import { logger } from "./component/logger";
import { GoogleSpreadsheet } from "google-spreadsheet";
import { AppDatasource } from "./component";
import puppeteer from "puppeteer";

logger.info('Starting Test Sequence please wait ... ')

async function TestGSheets() {
    logger.info('Testing Google Sheet Connections ...')
    try {
        const serviceAccountAuth = new JWT({
            // env var values here are copied from service account credentials generated by google
            // see "Authentication" section in docs for more info
            email: constants.client_email,
            key: constants.private_key,
            scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        });
        const doc = new GoogleSpreadsheet(constants.bannedkeywordsSheetID, serviceAccountAuth);
        await doc.loadInfo()
        logger.info('Google Sheets Working with status 200')
        return 0
    } catch (error) {
        logger.error('Google sheets Failed to Connect ...')
        //throw error
        logger.error(error)
        return 1
    }
}

async function TestDatabase() {
    logger.info('Testing Local Database Connection ...')
    await AppDatasource.then((connection) => {
        logger.info('Local Database working with status 200')
    }).catch((error) => {
        logger.error('Local Database Failed to Connect ...')
        logger.error(error)
    })

}

async function TestChrome() {
    logger.info('Testing chrome Browser instalation ... ')
    try {
        const browser = await puppeteer.launch({
            headless: false,
            userDataDir: "./profile"
        })
        const page = await browser.newPage()
        await page.setViewport({ height: 900, width: 1600 })

        logger.info('Browser Instance Ready ...')
        await page.close();
        await browser.close();
    } catch (error) {
        logger.error('Browser Failed to connect ...')
        logger.error(error)
    }
}



(async () => {
    let firstTest = await TestGSheets();
    let seccondTest = await TestDatabase();
    let thirdTest = await TestChrome();
})()