import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { constants } from "./constants"
import { KeywordGoogleSheets } from '../index.types';





export async function ExportDocument(docs: Array<any>, headers: Array<string>, spreadSHeetID: string, sheetIndex: 0 | 1) {

    const serviceAccountAuth = new JWT({
        // env var values here are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        email: constants.client_email,
        key: constants.private_key,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    const doc = new GoogleSpreadsheet(spreadSHeetID, serviceAccountAuth);
    await doc.loadInfo();
    const worksheet = doc.sheetsByIndex[sheetIndex];
    await worksheet.setHeaderRow(headers)
    await worksheet.addRows(docs).catch((error) => {
        console.log(error)
    })
}

export async function ReadingKeyWordList(): Promise<Array<KeywordGoogleSheets>> {
    try {
        let keywords: Array<KeywordGoogleSheets> = []
        const serviceAccountAuth = new JWT({
            email: constants.client_email,
            key: constants.private_key,
            scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        })
        const doc = new GoogleSpreadsheet(constants.bannedkeywordsSheetID, serviceAccountAuth)
        await doc.loadInfo()
        const sheet = doc.sheetsByIndex[0]
        const rows = await sheet.getRows()
        if (rows.length === 0) {
            return []
        } else {
            rows.map((row) => {
                keywords.push(row.toObject() as KeywordGoogleSheets)
            })
            return keywords
        }
    } catch (error) {
        throw error
    }
}

export async function ReadingLastID(spreadSheetID: string, SheetID: number) {
    try {
        const serviceAccountAuth = new JWT({
            email: constants.client_email,
            key: constants.private_key,
            scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        })
        const doc = new GoogleSpreadsheet(spreadSheetID, serviceAccountAuth);
        await doc.loadInfo();
        // Get the first sheet (you can specify a different sheet if needed)
        const sheet = doc.sheetsByIndex[SheetID];
        // Load all rows
        const rows = await sheet.getRows();
        // Get the last row
        if (rows.length > 0) {
            const lastRow = rows[rows.length - 1];
            // Convert the last row to a plain object
            const lastRowObject = lastRow.toObject();
            return eval(lastRowObject.Lead_ID) + 1;
        } else {
            return 1
        }
    } catch (error) {
        console.log(error)
    }
}




